From d143e62757c6583ae59e6fb56d57b92eae266121 Mon Sep 17 00:00:00 2001
From: Yunjie Hu <yh1112@nyu.edu>
Date: Mon, 2 Nov 2015 14:19:55 -0500
Subject: [PATCH] Implement lazy allocation

---
 defs.h    |  2 ++
 sysproc.c |  5 +++--
 trap.c    | 13 +++++++++++++
 vm.c      |  5 +++--
 4 files changed, 21 insertions(+), 4 deletions(-)

diff --git a/defs.h b/defs.h
index b47372b..582cb00 100644
--- a/defs.h
+++ b/defs.h
@@ -156,6 +156,7 @@ void            idtinit(void);
 extern uint     ticks;
 void            tvinit(void);
 extern struct spinlock tickslock;
+int             mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
 
 // uart.c
 void            uartinit(void);
@@ -178,6 +179,7 @@ void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+int             mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..9d0bc1e 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -51,8 +51,9 @@ sys_sbrk(void)
   if(argint(0, &n) < 0)
     return -1;
   addr = proc->sz;
-  if(growproc(n) < 0)
-    return -1;
+  proc->sz += n;
+  /*if(growproc(n) < 0)
+    return -1;*/
   return addr;
 }
 
diff --git a/trap.c b/trap.c
index 3f80145..8da0e1a 100644
--- a/trap.c
+++ b/trap.c
@@ -8,6 +8,7 @@
 #include "traps.h"
 #include "spinlock.h"
 
+
 // Interrupt descriptor table (shared by all CPUs).
 struct gatedesc idt[256];
 extern uint vectors[];  // in vectors.S: array of 256 entry pointers
@@ -45,6 +46,18 @@ trap(struct trapframe *tf)
       exit();
     return;
   }
+    
+ if(tf->trapno == T_PGFLT) {
+     char* mem = kalloc();
+     uint a = PGROUNDDOWN(rcr2());
+     if(mem ==0){
+         cprintf("out of memory");
+         return;
+     }
+     memset(mem, 0, PGSIZE);
+     mappages(proc->pgdir, (char*) a, PGSIZE, v2p(mem), PTE_W | PTE_U);
+     return ;
+ }
 
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
diff --git a/vm.c b/vm.c
index 5326d14..8849097 100644
--- a/vm.c
+++ b/vm.c
@@ -67,7 +67,7 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
@@ -320,7 +320,8 @@ copyuvm(pde_t *pgdir, uint sz)
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
     if(!(*pte & PTE_P))
-      panic("copyuvm: page not present");
+        continue;
+      //panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
-- 
2.5.3

